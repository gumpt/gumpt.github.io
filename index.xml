<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mbg</title>
    <link>https://blog.gum.pt/</link>
    <description>mbg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 May 2021 18:58:45 -0700</lastBuildDate>
    
    <atom:link href="https://blog.gum.pt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Graeber&#39;s Oeuvre</title>
      <link>https://blog.gum.pt/notes/graeber/</link>
      <pubDate>Thu, 27 May 2021 18:58:45 -0700</pubDate>
      
      <guid>https://blog.gum.pt/notes/graeber/</guid>
      <description>&lt;p&gt;If I could write like anyone, I would write like David Graeber.&lt;/p&gt;
&lt;p&gt;I say that based on how the first writing of his in &lt;em&gt;The Baffler&lt;/em&gt; I came
across&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; wormed its way into my brain, a reference whenever I had to spend too
much of my day doing &amp;ldquo;busywork,&amp;rdquo; figuring out why the tickets in the bug tracker
had a cyclical reference making the root of the cause undecipherable, filling
out status updates in three separate but Very Important places, listening to
friends describe what ran them out of academia.&lt;/p&gt;
&lt;p&gt;I say that based on his political analysis, having referenced his &lt;a href=&#34;https://nymag.com/nymetro/realestate/neighborhoods/features/14884/&#34;&gt;analysis of
British elections
post-Brexit&lt;/a&gt;
more often than anything else when trying to describe fundamental political
problems in the United States to anyone else, or predict (somewhat accurately)
what would happen in 2020.&lt;/p&gt;
&lt;p&gt;I say that because he had a knack for calling out bullshit and naming it such,
going semi-viral for calling the current state of work an epidemic of &lt;a href=&#34;https://www.strike.coop/bullshit-jobs/&#34;&gt;Bullshit
Jobs&lt;/a&gt;, later expanding the thesis into a
book, writing so many sentences that made me want to yell and scream and stamp
my feet that someone finally knows what they&amp;rsquo;re talking about, has their finger
on the pulse but the larger picture in mind, an acute and terminal understanding
of the world around us.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The answer clearly isn&amp;rsquo;t economic: it&amp;rsquo;s moral and political. The ruling
class has figured out that a happy and productive population with free time
on their hands is a mortal danger (think of what started to happen when this
even began to be approximated in the &amp;rsquo;60s). And, on the other hand, the
feeling that work is a moral value in itself, and that anyone not willing to
submit themselves to some kind of intense work discipline for most of their
waking hours deserves nothing, is extraordinarily convenient for them.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I say that because his humor comes through despite this subject matter, how
bureaucratic structures in our government are reflected in our languages and
thoughts, how The Left was fighting (and losing!) the wrong battles, how there
would never be The Revolution, the one moment where you could point to a Before
and an After, clearly demarcated by drastic improvements in people&amp;rsquo;s lives, but
that we need to work every single day to try to make the world around us what it
needs to be.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Someone once figured out that the average American will spend a cumulative six
months of life waiting for traffic lights to change. I donâ€™t know if similar
figures are available for how long it takes to fill out forms, but it must be
at least as long. No population in the history of the world has spent nearly
so much time engaged in paperwork.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All of his books, articles, blog posts, interviews, tweets, coughs and other
gutteral utterances, are worth reading closely.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A footnote is required to note how wonderful the title is: &lt;a href=&#34;https://thebaffler.com/salvos/of-flying-cars-and-the-declining-rate-of-profit&#34;&gt;Of Flying Cars and the Declining Rate of Profit.&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.strike.coop/bullshit-jobs/&#34;&gt;https://www.strike.coop/bullshit-jobs/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Having and Being Had</title>
      <link>https://blog.gum.pt/notes/having-and-being-had/</link>
      <pubDate>Sun, 27 Sep 2020 21:19:02 -0700</pubDate>
      
      <guid>https://blog.gum.pt/notes/having-and-being-had/</guid>
      <description>&lt;p&gt;I finished &lt;a href=&#34;//bookshop.org/books/having-and-being-had/9780525537458&#34;&gt;&lt;em&gt;Having and Being Had&lt;/em&gt;&lt;/a&gt; by Eula Biss earlier this
weekend. Biss tries to walk through her ascent from starving artist to gardening
homeowner, her discomfort at the tension between her egalitarian principles and
the comfortable space she has created for her life and work.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s short, with some wistful and ironic witticisms from the author mixed with
generous quotations of David Graeber, Binyamin Appelbaum, Alison Light, and
others. Biss precisely defines similar words (splitting the hairs between labor,
toil, and work) and identifying the metaphors or euphemisms (the &amp;ldquo;Opulence
White&amp;rdquo; she considers painting a room, the possible double meanings of
&amp;ldquo;aggressive investing&amp;rdquo;) we use to avoid thinking about them more closely.&lt;/p&gt;
&lt;p&gt;It felt like I was reading an alternate universe version of &lt;a href=&#34;//bookshop.org/books/how-to-do-nothing-resisting-the-attention-economy/9781612197494&#34;&gt;&lt;em&gt;How To Do
Nothing&lt;/em&gt;&lt;/a&gt;, not only because they both star &lt;a href=&#34;//www.nytimes.com/2016/09/22/arts/design/mierle-laderman-ukeles-new-york-city-sanitation-department.html&#34;&gt;Mierle Ukeles&lt;/a&gt; as a
prime example of work and systems re-examined, but also because it was
unsatisfying, half of a meal. When writing about what she finds displeasing
about driving cars, Biss writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cars make you stupid, in the way wealth makes you stupid. In the way any sort
of power makes you stupid, really. And it is this, my own stupidity, that I
dislike most about driving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For her, there is nothing to be done but sit with the discomfort and feel better
for knowing we feel it. I&amp;rsquo;d read more Graeber for solutions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Purpose</title>
      <link>https://blog.gum.pt/notes/purpose/</link>
      <pubDate>Sat, 20 Jun 2020 12:23:26 -0700</pubDate>
      
      <guid>https://blog.gum.pt/notes/purpose/</guid>
      <description>&lt;p&gt;I read a lot and want to share.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not the most prolific reader I know personally or know of online (those
would be my oldest sister and Charity Majors, respectively), but I read enough
that people sometimes ask me for book recommendations. I often end up
recommending the same books over and over to different people.&lt;/p&gt;
&lt;p&gt;I keep a list of what I&amp;rsquo;ve read for myself, but I&amp;rsquo;m going to start writing about
some here with some small snippets and thoughts.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a bit of an exercise in vanity, but hopefully someone finds something on
here they wouldn&amp;rsquo;t have otherwise read. At the very least, I can be a target for
the same snark I direct towards other famous reading lists.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;From a quick glance, &lt;a href=&#34;//www.gatesnotes.com&#34;&gt;Bill Gates&lt;/a&gt; wants you to know that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Cloud Atlas&lt;/em&gt; &lt;a href=&#34;//www.gatesnotes.com/Books/Cloud-Atlas&#34;&gt;is a good book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thomas Piketty has errors both in his &lt;a href=&#34;//www.gatesnotes.com/Books/Why-Inequality-Matters-Capital-in-21st-Century-Review&#34;&gt;diagnosis and
prescription&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My brain for each of these went down the rabbit-holes of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Cloud Atlas&lt;/em&gt; fits into David Mitchell&amp;rsquo;s canon in an interesting way,
expanding both on the not-quite-shared past and near-future he explores in
other books more fully, but I thought the narrative gimmick inspired by
Calvino&amp;rsquo;s &lt;em&gt;If on a winter&amp;rsquo;s night a traveler&lt;/em&gt; distracts from the throughline
of each story. I think Wachowskis agreed with me, as seen in the &lt;a href=&#34;//youtu.be/7Y0JzIP-c30?t=18&#34;&gt;film
adaptation&lt;/a&gt; where &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I would also say a wealth tax is misguided if I had
109.4 billion dollars.&lt;/p&gt;
&lt;p&gt;That he first points to consumption data to say the poor aren&amp;rsquo;t &lt;em&gt;really&lt;/em&gt;
poor in rich countries only to then propose futher taxing consumption hurts
my head. He can&amp;rsquo;t help himself and even proposes carve-outs for political
donations in his ideal tax strategy!&lt;/p&gt;
&lt;p&gt;Bill Gates may want to employ a better editor for his arguments that he does not
&lt;a href=&#34;//www.businessinsider.com/crazy-facts-about-bill-gates-house-2016-11&#34;&gt;have too much money&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To be fair, I imagine that Mr. Gates does not actually write each of the reviews
on his blog, and he also has plenty to read and write about critically
besides postmodern literature.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Recognizing learned helplessness</title>
      <link>https://blog.gum.pt/posts/recognizing-learned-helplessness/</link>
      <pubDate>Fri, 30 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gum.pt/posts/recognizing-learned-helplessness/</guid>
      <description>&lt;p&gt;One of the most useful blog posts I&amp;rsquo;ve read is &lt;a href=&#34;//danluu.com&#34;&gt;Dan Luu&lt;/a&gt; on what
he calls &lt;a href=&#34;//danluu.com/wat/&#34;&gt;&amp;ldquo;normalization of deviance.&amp;quot;&lt;/a&gt; It covers a lot of
different ways that the collective lowering and raising of standards can occur
in large organizations. A hypothetical conversation described in the post is
something I want to talk about more:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*new person joins*
new person: WTF WTF WTF WTF WTF
old hands: yeah we know we&#39;re concerned about it
new person: WTF WTF wTF wtf wtf w...
*new person gets used to it*
*new person #2 joins*
new person #2: WTF WTF WTF WTF
new person: yeah we know. we&#39;re concerned about it.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A lot of &amp;ldquo;war stories&amp;rdquo; from companies begin this way. The bit in this flow I
have found painful and want to talk about more is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*new person gets used to it*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A technical term for this is &lt;a href=&#34;//en.wikipedia.org/wiki/Learned_helplessness&#34;&gt;learned
helplessness&lt;/a&gt;. All animals learn
what in their environment they can and cannot change, and we will give up trying
to change what we cannot control regardless of how painful the situation is. The
term is typically used to describe much more pernicious situations than bad
engineering conditions at a company, but it still applies.&lt;/p&gt;
&lt;p&gt;The most useful signal for damaging parts of your workflow comes from new sets
of eyes, no matter their level or previous domain experience. Seniority doesn&amp;rsquo;t
necessarily mean better problem recognition. New people usually can see the
problems most clearly, while articulating them is in tension with the desire to
not rock the boat while still green in a role.&lt;/p&gt;
&lt;p&gt;People who recognize broken systems may try to fix them, but if they try for
long enough they burn out. Bitterness at a failure or a lack of organizational
support lingers, and what&amp;rsquo;s learned about the company and wider organization can
carry over to future projects. People who are not given the support to fix their
broken teams can turn into bitter employees even after they change teams.&lt;/p&gt;
&lt;p&gt;Knowing this is happening helps! It&amp;rsquo;s easy to carry bitterness of past work
around. While it can feel important to be right in all discussions, it&amp;rsquo;s more
important to be kind. Stop yourself before you&amp;rsquo;re a &lt;a href=&#34;//www.brendangregg.com/blog/2017-11-13/brilliant-jerks.html&#34;&gt;&amp;ldquo;selfless
jerk,&amp;quot;&lt;/a&gt; isolated in
your quest to be a martyr for the company. This is where self-awareness and
knowing what&amp;rsquo;s happening helps course-correct.&lt;/p&gt;
&lt;p&gt;It is okay to give up and move on from certain battles. Not everything can be
fixed, but bringing frustration into future projects isn&amp;rsquo;t helpful or a sign of
grizzled wisdom. Don&amp;rsquo;t let toxicity drag you down.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clang AST Matchers</title>
      <link>https://blog.gum.pt/posts/clang-ast-matchers/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gum.pt/posts/clang-ast-matchers/</guid>
      <description>&lt;p&gt;One way to cope with lots of possible submitters to a project, each of own may
have their own definitions of quality, is to enforce a quality bar with
tooling.  This means everything from running a linter to using static and
runtime analysis to find dormant bugs.&lt;/p&gt;
&lt;p&gt;Quick list of some completely reasonable things to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linters: &lt;code&gt;clang-format&lt;/code&gt;, &lt;code&gt;flint&lt;/code&gt;, et al.&lt;/li&gt;
&lt;li&gt;Static analysis: Coverity, &lt;code&gt;scan-build&lt;/code&gt;, cppcheck&lt;/li&gt;
&lt;li&gt;Runtime analysis: All of the sanitizers
(&lt;a href=&#34;//clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;ubsan&lt;/a&gt;,
&lt;a href=&#34;//clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;asan&lt;/a&gt;,
&lt;a href=&#34;//clang.llvm.org/docs/ThreadSanitizer.html&#34;&gt;tsan&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;libtooling in llvm/clang provides an amazing library of functions to use when
other tools don&amp;rsquo;t give you the checks that you want.  The clang docs in general
are high quality and the documentation on getting started with libtooling&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
is very helpful for getting started with using the pre-built tools to find
common problems.&lt;/p&gt;
&lt;p&gt;libtooling also provides a handy list of helper functions so that you can write
your own static analysis tool. There is
a &lt;a href=&#34;//clang.llvm.org/docs/LibASTMatchersTutorial.html&#34;&gt;tutorial&lt;/a&gt; for set
of abstract syntax tree (AST, what the compiler builds in order to understand
your code and uses to determine how to turn it into a real program) matcher
interface, mostly because I thought the DSL it defined was really
neat.&lt;/p&gt;
&lt;p&gt;The DSL lets you define some attibute of AST nodes you want to match on, where
the attributes can be 1) the type of the node or 2) the type of any of the
node&amp;rsquo;s ancestors or children in 3) any sort of combination you think is worth
looking at.  You can then define a callback action to perform when those nodes
are found to either just log or automatically rewrite the found code.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you wanted to build a tool to look for destructors which throw.  You
could write an AST matcher for a destructor with a throw statement like the
following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;DeclarationMatcher ThrowDestructorMatcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    cxxDestructorDecl(
      hasDescendant(
        cxxThrowExpr().bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;throw&amp;#34;&lt;/span&gt;)
      )).bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destructor&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quick explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DeclarationMatcher&lt;/code&gt; means this is a &lt;code&gt;Matcher&amp;lt;Decl&amp;gt;&lt;/code&gt; so the root node of the
AST we&amp;rsquo;re going to get back will be of type &lt;code&gt;Decl&lt;/code&gt;, which makes sense since
we&amp;rsquo;re looking for &lt;code&gt;cxxDestructorDecl&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasDescendant&lt;/code&gt; belongs to a group of very neat generic matchers.  We don&amp;rsquo;t
need do any traversal on our own of children and subtrees, the DSL lets us
specify the relationships we want.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.bind()&lt;/code&gt; call lets us define an identifier which will map to the nodes
and let us retrieve them later on in our &lt;code&gt;MatchCallback&lt;/code&gt; (the action to
perform on finding one of these).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That AST matcher isn&amp;rsquo;t generic enough though &amp;ndash; what if the exception being
thrown isn&amp;rsquo;t directly in the destructor, but instead in a function the
destructor calls?  We&amp;rsquo;d need to make it a little more generic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; Throws &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hasDescendant(cxxThrowExpr().bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;throw&amp;#34;&lt;/span&gt;));
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; FunctionWhichThrows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; functionDecl(Throws).bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;throw_function&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; CallsToFunctionWhichThrows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    hasDescendant(declRefExpr(to(FunctionWhichThrows)));
DeclarationMatcher ThrowDestructorMatcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    cxxDestructorDecl(anyOf(
      Throws,
      CallsToFunctionWhichThrows
    )).bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;destructor&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we can pull out &amp;ldquo;CallsTo&amp;rdquo; as its own idea, and reuse it to detect
doubly-nested calls to throws.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; CallsTo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    [](DeclarationMatcher dm) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; DeclarationMatcher {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hasDescendant&lt;/span&gt;(declRefExpr(to(dm)));
    };

&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; CallsToCallsToFunctionWhichThrows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CallsTo(CallsToFunctionWhichThrows);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s so cool!&lt;/p&gt;
&lt;p&gt;One limitation, which may not be obvious if you&amp;rsquo;re unaware of how C++
compilation works, is that the AST parsing facilities libtooling provides are
scoped to a single compilation/translation-unit only.  To oversimplify, the AST
for a given function &lt;code&gt;foo&lt;/code&gt; will not have access to the body of symbols which
are not defined in the same place/file in which &lt;code&gt;foo&lt;/code&gt; is defined.  A trick to
cope with this is making everything you&amp;rsquo;re interested in a single compilation
unit similar to a precompiled header.&lt;/p&gt;
&lt;p&gt;The AST Matchers are really cool and powerful.  Playing with them made me feel
like I had superpowers to go find bad patterns, whatever they may be and
wherever they are.  At the very least, looking for smelly code at $WORK is much
simpler with this out there.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The official documentation includes a pair of tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;//clang.llvm.org/docs/RAVFrontendAction.html&#34;&gt;Frontend Action tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//clang.llvm.org/docs/LibASTMatchersTutorial.html&#34;&gt;AST Matcher tutorial (again)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and a very nice &lt;a href=&#34;//clang.llvm.org/docs/LibASTMatchersReference.html&#34;&gt;reference&lt;/a&gt; for the AST Matcher DSL.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>